{
 "Resources": {
  "visitorCountLambdaFunctionServiceRole89054877": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:",
            {
             "Ref": "AWS::Partition"
            },
            ":logs:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":log-group:/aws/lambda/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "LambdaFunctionServiceRolePolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/visitorCount/LambdaFunctionServiceRole/Resource"
   }
  },
  "visitorCountLambdaFunctionServiceRoleDefaultPolicyA9E665E8": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "visitorCountDynamoTableCB1BCD3C",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "visitorCountLambdaFunctionServiceRoleDefaultPolicyA9E665E8",
    "Roles": [
     {
      "Ref": "visitorCountLambdaFunctionServiceRole89054877"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/visitorCount/LambdaFunctionServiceRole/DefaultPolicy/Resource",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray and access ENIs in a VPC."
      }
     ]
    }
   }
  },
  "visitorCountLambdaFunction9C3E2621": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "6673956a66f8cb9809f1d4fe2b6e711cb897f7f78080216c20fa01a95298fd32.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
      "DDB_TABLE_NAME": {
       "Ref": "visitorCountDynamoTableCB1BCD3C"
      }
     }
    },
    "Handler": "updateVisitorCount.handler",
    "Role": {
     "Fn::GetAtt": [
      "visitorCountLambdaFunctionServiceRole89054877",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "visitorCountLambdaFunctionServiceRoleDefaultPolicyA9E665E8",
    "visitorCountLambdaFunctionServiceRole89054877"
   ],
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/visitorCount/LambdaFunction/Resource",
    "aws:asset:path": "asset.6673956a66f8cb9809f1d4fe2b6e711cb897f7f78080216c20fa01a95298fd32",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W58",
       "reason": "Lambda functions has the required permission to write CloudWatch Logs. It uses custom policy instead of arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole with tighter permissions."
      },
      {
       "id": "W89",
       "reason": "This is not a rule for the general case, just for specific use cases/industries"
      },
      {
       "id": "W92",
       "reason": "Impossible for us to define the correct concurrency for clients"
      }
     ]
    }
   }
  },
  "visitorCountDynamoTableCB1BCD3C": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "count",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "count",
      "KeyType": "HASH"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "SSEEnabled": true
    },
    "TableName": "visitorCount"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/visitorCount/DynamoTable/Resource"
   }
  },
  "resumeapiB6A8F4D2": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "resume_api"
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Resource"
   }
  },
  "resumeapiCloudWatchRole06D0F815": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "apigateway.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
       ]
      ]
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/CloudWatchRole/Resource"
   }
  },
  "resumeapiAccount322587A9": {
   "Type": "AWS::ApiGateway::Account",
   "Properties": {
    "CloudWatchRoleArn": {
     "Fn::GetAtt": [
      "resumeapiCloudWatchRole06D0F815",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "resumeapiB6A8F4D2"
   ],
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Account"
   }
  },
  "resumeapiDeploymentE8D38E2Fb9e12419d2e8e487986d9b982b546b18": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "resumeapiB6A8F4D2"
    }
   },
   "DependsOn": [
    "resumeapiOPTIONSAF5BD0E2",
    "resumeapiPOST2F7501CD"
   ],
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Deployment/Resource"
   }
  },
  "resumeapiDeploymentStageprod45D5612C": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "resumeapiDeploymentE8D38E2Fb9e12419d2e8e487986d9b982b546b18"
    },
    "RestApiId": {
     "Ref": "resumeapiB6A8F4D2"
    },
    "StageName": "prod"
   },
   "DependsOn": [
    "resumeapiAccount322587A9"
   ],
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/DeploymentStage.prod/Resource"
   }
  },
  "resumeapiOPTIONSAF5BD0E2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'",
        "method.response.header.Access-Control-Allow-Origin": "'https://milokastablank.com'",
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "resumeapiB6A8F4D2",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "resumeapiB6A8F4D2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Default/OPTIONS/Resource"
   }
  },
  "resumeapiPOSTApiPermissionResumeBackEndStackresumeapiE5081DD4POST25EAE7B3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "visitorCountLambdaFunction9C3E2621",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "resumeapiB6A8F4D2"
       },
       "/",
       {
        "Ref": "resumeapiDeploymentStageprod45D5612C"
       },
       "/POST/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Default/POST/ApiPermission.ResumeBackEndStackresumeapiE5081DD4.POST.."
   }
  },
  "resumeapiPOSTApiPermissionTestResumeBackEndStackresumeapiE5081DD4POSTA2D5BF1D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "visitorCountLambdaFunction9C3E2621",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "resumeapiB6A8F4D2"
       },
       "/test-invoke-stage/POST/"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Default/POST/ApiPermission.Test.ResumeBackEndStackresumeapiE5081DD4.POST.."
   }
  },
  "resumeapiPOST2F7501CD": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "visitorCountLambdaFunction9C3E2621",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Fn::GetAtt": [
      "resumeapiB6A8F4D2",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "resumeapiB6A8F4D2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/Default/POST/Resource"
   }
  },
  "resumeapiUsagePlan0B24EACD": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "Throttle": {
     "BurstLimit": 20,
     "RateLimit": 50
    }
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/resume_api/UsagePlan/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/01Qy24CMQz8Fu7Z8CjtuTzUU6siSs8oJIYGsslq7RStVvvvdRJEucQzfsSemcl+OpnLyUhdsdLmUjl7kP0XKX0RnNr3VtWy3wYHYnX0OW6Cs7pLtKBBOFUfjJL9W/SabPCp9og30NYWkdkg8GmvEIFQLlJgLpdRX4CWCkGYzqs6GD5hpw5lZwaDUI09KYKr6mT/nvdtAWnR2HzXP1xoHaInsYbGha4Ghpx9YKztlD8ugEdDbDXk9R9AP8Gk4g19I/dsnMoy7mQY7mMiq0hfWX9KTZ+Rmki3o0oL41XwxlI2YP7Mbr8muzG4mHJsPD/URk04ToXiZ3U3o+jdhXVOrJeD8MGAPOP4dzaRL3I6OqO1Vcu6bQ1yW+IfSlEjY9sBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "ResumeBackEndStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "resumeapiEndpoint3929D220": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "resumeapiB6A8F4D2"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "resumeapiDeploymentStageprod45D5612C"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}