"use strict";
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.addProxyMethodToApiResource = exports.CreateSpecRestApi = exports.RegionalRestApi = exports.GlobalRestApi = exports.RegionalLambdaRestApi = exports.GlobalLambdaRestApi = void 0;
const cdk = require("aws-cdk-lib");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const iam = require("aws-cdk-lib/aws-iam");
const apiDefaults = require("./apigateway-defaults");
const cloudwatch_log_group_helper_1 = require("./cloudwatch-log-group-helper");
const utils_1 = require("./utils");
/**
 * Create and configures access logging for API Gateway resources.
 * @param scope - the construct to which the access logging capabilities should be attached to.
 * @param api - an existing api.RestApi or api.LambdaRestApi.
 */
function configureCloudwatchRoleForApi(scope, api) {
    // Setup the IAM Role for API Gateway CloudWatch access
    const restApiCloudwatchRole = new iam.Role(scope, 'LambdaRestApiCloudWatchRole', {
        assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),
        inlinePolicies: {
            LambdaRestApiCloudWatchRolePolicy: new iam.PolicyDocument({
                statements: [new iam.PolicyStatement({
                        actions: [
                            'logs:CreateLogGroup',
                            'logs:CreateLogStream',
                            'logs:DescribeLogGroups',
                            'logs:DescribeLogStreams',
                            'logs:PutLogEvents',
                            'logs:GetLogEvents',
                            'logs:FilterLogEvents'
                        ],
                        resources: [`arn:${cdk.Aws.PARTITION}:logs:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:*`]
                    })]
            })
        }
    });
    // Create and configure AWS::ApiGateway::Account with CloudWatch Role for ApiGateway
    const CfnApi = api.node.findChild('Resource');
    const cfnAccount = new apigateway.CfnAccount(scope, 'LambdaRestApiAccount', {
        cloudWatchRoleArn: restApiCloudwatchRole.roleArn
    });
    cfnAccount.addDependency(CfnApi);
    // Suppress Cfn Nag warning for APIG
    const deployment = api.latestDeployment?.node.findChild('Resource');
    utils_1.addCfnSuppressRules(deployment, [
        {
            id: 'W45',
            reason: `ApiGateway has AccessLogging enabled in AWS::ApiGateway::Stage resource, but cfn_nag checks for it in AWS::ApiGateway::Deployment resource`
        }
    ]);
    // Return the CW Role
    return restApiCloudwatchRole;
}
/**
 * Creates and configures an api.LambdaRestApi.
 * @param scope - the construct to which the LambdaRestApi should be attached to.
 * @param defaultApiGatewayProps - the default properties for the LambdaRestApi.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function configureLambdaRestApi(scope, defaultApiGatewayProps, apiGatewayProps) {
    // API Gateway doesn't allow both endpointTypes and endpointConfiguration, check whether endPointTypes exists
    if (apiGatewayProps?.endpointTypes) {
        throw Error('Solutions Constructs internally uses endpointConfiguration, use endpointConfiguration instead of endpointTypes');
    }
    // Define the API object
    let api;
    if (apiGatewayProps) {
        // If property overrides have been provided, incorporate them and deploy
        const consolidatedApiGatewayProps = utils_1.consolidateProps(defaultApiGatewayProps, apiGatewayProps, { cloudWatchRole: false });
        api = new apigateway.LambdaRestApi(scope, 'LambdaRestApi', consolidatedApiGatewayProps);
    }
    else {
        // If no property overrides, deploy using the default configuration
        api = new apigateway.LambdaRestApi(scope, 'LambdaRestApi', defaultApiGatewayProps);
    }
    // Configure API access logging
    const cwRole = (apiGatewayProps?.cloudWatchRole !== false) ? configureCloudwatchRoleForApi(scope, api) : undefined;
    // Configure Usage Plan
    const usagePlanProps = {
        apiStages: [{
                api,
                stage: api.deploymentStage
            }]
    };
    const plan = api.addUsagePlan('UsagePlan', usagePlanProps);
    // If requireApiKey param is set to true, create a api key & associate to Usage Plan
    if (apiGatewayProps?.defaultMethodOptions?.apiKeyRequired === true) {
        // Configure Usage Plan with API Key
        const key = api.addApiKey('ApiKey');
        plan.addApiKey(key);
    }
    // Return the API and CW Role
    return { api, role: cwRole };
}
/**
 * Creates and configures an api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param defaultApiGatewayProps - the default properties for the RestApi.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function configureRestApi(scope, defaultApiGatewayProps, apiGatewayProps) {
    // API Gateway doesn't allow both endpointTypes and endpointConfiguration, check whether endPointTypes exists
    if (apiGatewayProps?.endpointTypes) {
        throw Error('Solutions Constructs internally uses endpointConfiguration, use endpointConfiguration instead of endpointTypes');
    }
    const consolidatedApiGatewayProps = utils_1.consolidateProps(defaultApiGatewayProps, apiGatewayProps, { cloudWatchRole: false });
    const api = new apigateway.RestApi(scope, 'RestApi', consolidatedApiGatewayProps);
    let cwRole;
    // Configure API access logging
    if (apiGatewayProps?.cloudWatchRole !== false) {
        cwRole = configureCloudwatchRoleForApi(scope, api);
    }
    // Configure Usage Plan
    const usagePlanProps = {
        apiStages: [{
                api,
                stage: api.deploymentStage
            }]
    };
    const plan = api.addUsagePlan('UsagePlan', usagePlanProps);
    // If requireApiKey param is set to true, create a api key & associate to Usage Plan
    if (apiGatewayProps?.defaultMethodOptions?.apiKeyRequired === true) {
        // Configure Usage Plan with API Key
        const key = api.addApiKey('ApiKey');
        plan.addApiKey(key);
    }
    // Return the API and CW Role
    return { api, role: cwRole };
}
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a global api.RestApi designed to be used with an AWS Lambda function.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param _existingLambdaObj - an existing AWS Lambda function.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function GlobalLambdaRestApi(scope, _existingLambdaObj, apiGatewayProps, logGroupProps) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = cloudwatch_log_group_helper_1.buildLogGroup(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultGlobalLambdaRestApiProps(_existingLambdaObj, logGroup);
    const configureLambdaRestApiResponse = configureLambdaRestApi(scope, defaultProps, apiGatewayProps);
    return { api: configureLambdaRestApiResponse.api, role: configureLambdaRestApiResponse.role, group: logGroup };
}
exports.GlobalLambdaRestApi = GlobalLambdaRestApi;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a regional api.RestApi designed to be used with an AWS Lambda function.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param existingLambdaObj - an existing AWS Lambda function.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function RegionalLambdaRestApi(scope, existingLambdaObj, apiGatewayProps, logGroupProps) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = cloudwatch_log_group_helper_1.buildLogGroup(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultRegionalLambdaRestApiProps(existingLambdaObj, logGroup);
    const configureLambdaRestApiResponse = configureLambdaRestApi(scope, defaultProps, apiGatewayProps);
    return { api: configureLambdaRestApiResponse.api, role: configureLambdaRestApiResponse.role, group: logGroup };
}
exports.RegionalLambdaRestApi = RegionalLambdaRestApi;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a standard api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function GlobalRestApi(scope, apiGatewayProps, logGroupProps) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = cloudwatch_log_group_helper_1.buildLogGroup(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultGlobalRestApiProps(logGroup);
    const configureRestApiResponse = configureRestApi(scope, defaultProps, apiGatewayProps);
    return { api: configureRestApiResponse.api, role: configureRestApiResponse.role, logGroup };
}
exports.GlobalRestApi = GlobalRestApi;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Builds and returns a Regional api.RestApi.
 * @param scope - the construct to which the RestApi should be attached to.
 * @param apiGatewayProps - (optional) user-specified properties to override the default properties.
 */
function RegionalRestApi(scope, apiGatewayProps, logGroupProps) {
    // Configure log group for API Gateway AccessLogging
    const logGroup = cloudwatch_log_group_helper_1.buildLogGroup(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultRegionalRestApiProps(logGroup);
    const configureRestApiResponse = configureRestApi(scope, defaultProps, apiGatewayProps);
    return { api: configureRestApiResponse.api, role: configureRestApiResponse.role, logGroup };
}
exports.RegionalRestApi = RegionalRestApi;
function CreateSpecRestApi(scope, apiGatewayProps, logGroupProps) {
    const logGroup = cloudwatch_log_group_helper_1.buildLogGroup(scope, 'ApiAccessLogGroup', logGroupProps);
    const defaultProps = apiDefaults.DefaultSpecRestApiProps(scope, logGroup);
    // Define the API object
    let api;
    // If property overrides have been provided, incorporate them and deploy
    const consolidatedApiGatewayProps = utils_1.consolidateProps(defaultProps, apiGatewayProps, { cloudWatchRole: false });
    api = new apigateway.SpecRestApi(scope, 'SpecRestApi', consolidatedApiGatewayProps);
    // Configure API access logging
    const cwRole = (apiGatewayProps?.cloudWatchRole !== false) ? configureCloudwatchRoleForApi(scope, api) : undefined;
    // Configure Usage Plan
    const usagePlanProps = {
        apiStages: [{
                api,
                stage: api.deploymentStage
            }]
    };
    api.addUsagePlan('UsagePlan', usagePlanProps);
    return { api, role: cwRole, logGroup };
}
exports.CreateSpecRestApi = CreateSpecRestApi;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 */
function addProxyMethodToApiResource(params) {
    // Make sure the user hasn't also specified the application/json content-type in the additionalRequestTemplates optional property
    if (params.additionalRequestTemplates && 'application/json' in params.additionalRequestTemplates) {
        throw new Error(`Request Template for the application/json content-type must be specified in the requestTemplate property and not in the additionalRequestTemplates property `);
    }
    const requestTemplates = {
        "application/json": params.requestTemplate,
        ...params.additionalRequestTemplates
    };
    // Use user-provided integration responses, otherwise fallback to the default ones we provide.
    const integrationResponses = params.integrationResponses ?? apiDefaults.DefaultIntegrationResponses();
    let baseProps = {
        service: params.service,
        integrationHttpMethod: "POST",
        options: {
            passthroughBehavior: apigateway.PassthroughBehavior.NEVER,
            credentialsRole: params.apiGatewayRole,
            requestParameters: {
                "integration.request.header.Content-Type": params.contentType ? params.contentType : "'application/json'"
            },
            requestTemplates,
            integrationResponses
        }
    };
    let extraProps;
    if (params.action) {
        extraProps = {
            action: params.action
        };
    }
    else if (params.path) {
        extraProps = {
            path: params.path
        };
    }
    else {
        throw Error('Either action or path is required');
    }
    // Setup the API Gateway AWS Integration
    baseProps = Object.assign(baseProps, extraProps);
    let apiGatewayIntegration;
    const newProps = utils_1.consolidateProps(baseProps, params.awsIntegrationProps);
    apiGatewayIntegration = new apigateway.AwsIntegration(newProps);
    const defaultMethodOptions = {
        methodResponses: [
            {
                statusCode: "200",
                responseParameters: {
                    "method.response.header.Content-Type": true
                }
            },
            {
                statusCode: "500",
                responseParameters: {
                    "method.response.header.Content-Type": true
                },
            }
        ],
        requestValidator: params.requestValidator,
        requestModels: params.requestModel
    };
    // Setup the API Gateway method
    const overriddenProps = utils_1.consolidateProps(defaultMethodOptions, params.methodOptions);
    return params.apiResource.addMethod(params.apiMethod, apiGatewayIntegration, overriddenProps);
}
exports.addProxyMethodToApiResource = addProxyMethodToApiResource;
//# sourceMappingURL=data:application/json;base64,